<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Canopy Tech</title>
    <link>https://canopytax.github.io/post/</link>
    <description>Recent content in Posts on Canopy Tech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2016</copyright>
    <lastBuildDate>Fri, 23 Jun 2017 03:03:15 -0700</lastBuildDate>
    
	<atom:link href="https://canopytax.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thoughts to Microservices</title>
      <link>https://canopytax.github.io/post/thoughts-on-microservices/</link>
      <pubDate>Fri, 23 Jun 2017 03:03:15 -0700</pubDate>
      
      <guid>https://canopytax.github.io/post/thoughts-on-microservices/</guid>
      <description>The programming world moves very quickly compared to other industries. Many things come and go and it can often be hard to keep up with the latest trends. More often than not, it makes sense to not follow common trends, as they are untested, and might fade in a couple years anyways. How do we decide which trends to follow and which to pass on? This is a really hard problem, but can often be decided by digging further into the trend.</description>
    </item>
    
    <item>
      <title>Canopy&#39;s Sponsorship of SystemJS</title>
      <link>https://canopytax.github.io/post/systemjs-sponsorship/</link>
      <pubDate>Wed, 14 Jun 2017 08:05:03 -0700</pubDate>
      
      <guid>https://canopytax.github.io/post/systemjs-sponsorship/</guid>
      <description>Open-source Software Canopy is a SaaS product for tax professionals built upon a variety of open-source technology. When a project is open-sourced under a permissive license that means anybody can view, use, modify, and distribute your project for any purpose (https://opensource.guide). Open-source technology is built and maintained by hundreds and thousands of developers who may each contribute hundreds or even thousands of volunteer hours. While the success of most modern software companies is dependent upon a collection of open-source software, open-source development is often a difficult and thankless task.</description>
    </item>
    
    <item>
      <title>A step-by-step guide to single-spa</title>
      <link>https://canopytax.github.io/post/a-step-by-step-guide-to-single-spa/</link>
      <pubDate>Fri, 16 Dec 2016 19:54:28 +0000</pubDate>
      
      <guid>https://canopytax.github.io/post/a-step-by-step-guide-to-single-spa/</guid>
      <description>Running Angular 1, React, Angular 2, and Vue.js side by side sounds pretty cool. And it seems appealing to have multiple applications coexisting on the same page, each lazily loaded.
But using single-spa for the first time can be tricky because you’ll come across terms like “application lifecycles”, “root application”, “loading function”, “child application”, and “activity function.”
This blog post will take you through setting things up and what choices you have when using single-spa.</description>
    </item>
    
    <item>
      <title>A case against Angular Upgrade Adapter</title>
      <link>https://canopytax.github.io/post/case-against-angular-upgrade-adapter/</link>
      <pubDate>Fri, 16 Sep 2016 08:05:03 -0700</pubDate>
      
      <guid>https://canopytax.github.io/post/case-against-angular-upgrade-adapter/</guid>
      <description>If you’re hoping to migrate your Angular 1 application to Angular 2, you’re going to hear about the Angular Upgrade Adapter, which let’s you run ng1 and ng2 apps side by side.
It’s not that Angular Upgrade Adapter is bad or poorly written or doesn’t work. And it’s not the Typescript or the Angular 2 or the SystemJS.
But here are two reasons that will make you think twice about using Angular Upgrade Adapter:</description>
    </item>
    
    <item>
      <title>A Case for SOA in the Browser</title>
      <link>https://canopytax.github.io/post/soa-in-the-browser/</link>
      <pubDate>Fri, 26 Feb 2016 08:05:03 -0700</pubDate>
      
      <guid>https://canopytax.github.io/post/soa-in-the-browser/</guid>
      <description>So you are a web-developer. You write a lot of JavaScript. You have a large single-page application (SPA) with features to add and bugs to maintain. Over time the application grows in size and complexity. It becomes more difficult to modify one portion of the SPA without breaking another portion.
The company is growing and you are looking for ways to scale the team and code-base. You add unit tests.</description>
    </item>
    
  </channel>
</rss>